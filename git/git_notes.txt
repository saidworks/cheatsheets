

Example for git_practice

    mkdir git_practice to make a new directory to practice.
    cd git_practice to make the new directory your working directory.
    git init to turn the current, empty directory into a fresh Git repository.
    echo "Hello Git and GitHub" >> README.txt to create a new README file (more on this later) with some sample text.
    git add README.txt to add the new file to the Git staging area.
    git commit -m "First commit" to make your first commit with the new README file.

Git commands

git init
git status
git log
git add <filename> ---for all file type '.' without brackets-- 
git commit -m "balabala"

Github commands
	1.New repository
git remote add origin <url of repository in github> 
git push -u origin master
	2. Existing repository
git remote add <repository name> <url>
git push -u <repository name>  

https://github.com/saidworks/udacity.git
safety password
https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line


another method:
create the repository on github then clone it using the following : git clone git@github.com:username/google-homepage.git


delete branch 
//create branch
 
// delete branch locally
git branch -d localBranchName

// delete branch remotely
git push origin --delete remoteBranchName

// commit files only in specific folder to commit
git add . 
git commit -m 'message' -- my-dir


//if the default branch has been renamed! like from master to main in github, If you have a local clone, you can update it by running:

git branch -m master main
git fetch origin
git branch -u origin/main main
git remote set-head origin -a


-> get restore => to restore to previous version before staging 


->to sync local branch with remote one use the following commmad : git branch --set-upstream-to=origin/main main

->to solve problem related to docs created in github with unrelated history to local one use : git pull origin master --allow-unrelated-histories


->delete files or folder remote without delete locally
So, for a single file:

git rm --cached mylogfile.log

and for a single directory:

git rm --cached -r mydirectory


->to ammend to a commit message you can use : 

git commit --amend -m
